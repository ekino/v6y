import {
    AppLogger,
    DependencyStatusHelpInputType,
    DependencyVulnerabilityStatusProvider,
    SearchQueryType,
} from '@v6y/commons';

/**
 * Create or edit dependency vulnerability status
 * @param _
 * @param params
 */
const createOrEditDependencyVulnerabilityStatus = async (
    _: unknown,
    params: { dependencyVulnerabilityStatusInput: DependencyStatusHelpInputType },
) => {
    try {
        const { _id, title, description, category, links } =
            params?.dependencyVulnerabilityStatusInput || {};

        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] _id : ${_id}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] title : ${title}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] description : ${description}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] links : ${links?.join(
                ',',
            )}`,
        );

        if (_id) {
            const editedDependencyVulnerabilityStatus =
                await DependencyVulnerabilityStatusProvider.editDependencyVulnerabilityStatus({
                    _id,
                    title,
                    description,
                    category,
                    links,
                });

            AppLogger.info(
                `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] editedDependencyVulnerabilityStatus : ${editedDependencyVulnerabilityStatus?._id}`,
            );

            return {
                _id,
            };
        }

        const createdDependencyVulnerabilityStatus =
            await DependencyVulnerabilityStatusProvider.createDependencyVulnerabilityStatus({
                title,
                description,
                category,
                links,
            });

        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] createdDependencyVulnerabilityStatus : ${createdDependencyVulnerabilityStatus?._id}`,
        );

        return createdDependencyVulnerabilityStatus;
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusMutations - createOrEditDependencyVulnerabilityStatus] error : ${error}`,
        );
        return null;
    }
};

/**
 * Delete dependency vulnerability status
 * @param _
 * @param params
 */
const deleteDependencyVulnerabilityStatus = async (
    _: unknown,
    params: { input: SearchQueryType },
) => {
    try {
        const whereClause = params?.input?.where;
        if (!whereClause) {
            return null;
        }

        const dependencyVulnerabilityStatusId = whereClause.id;
        if (!dependencyVulnerabilityStatusId) {
            return null;
        }

        AppLogger.info(
            `[DependencyVulnerabilityStatusMutations - deleteDependencyVulnerabilityStatus] dependencyVulnerabilityStatusId : ${dependencyVulnerabilityStatusId}`,
        );

        await DependencyVulnerabilityStatusProvider.deleteDependencyVulnerabilityStatus({
            _id: parseInt(dependencyVulnerabilityStatusId, 10),
        });

        return {
            _id: dependencyVulnerabilityStatusId,
        };
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusMutations - deleteDependencyVulnerabilityStatus] error : ${error}`,
        );
        return null;
    }
};

const DependencyVulnerabilityStatusMutations = {
    createOrEditDependencyVulnerabilityStatus,
    deleteDependencyVulnerabilityStatus,
};

export default DependencyVulnerabilityStatusMutations;
