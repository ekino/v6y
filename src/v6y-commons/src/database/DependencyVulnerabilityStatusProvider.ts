import { FindOptions } from 'sequelize';

import { defaultVulnerabilityDependencyStatusHelp } from '../config/DependencyVulnerabilityHelpConfig.ts';
import AppLogger from '../core/AppLogger.ts';
import {
    DependencyStatusHelpInputType,
    DependencyStatusHelpType,
} from '../types/DependencyStatusHelpType.ts';
import { SearchQueryType } from '../types/SearchQueryType.ts';
import { DependencyStatusHelpModelType } from './models/DependencyStatusHelpModel.ts';

/**
 * Format the dependency vulnerability status input
 * @param dependencyStatusHelp
 */
const formatDependencyVulnerabilityStatusInput = (
    dependencyVulnerabilityStatus: DependencyStatusHelpInputType,
): DependencyStatusHelpType => ({
    _id: dependencyVulnerabilityStatus?._id,
    title: dependencyVulnerabilityStatus.title,
    description: dependencyVulnerabilityStatus.description,
    category: dependencyVulnerabilityStatus.category,
    links: dependencyVulnerabilityStatus.links
        ?.map((link: string) => ({
            label: 'More Information',
            value: link,
            description: '',
        }))
        ?.filter((item) => item?.value),
});

/**
 * Create a new dependency vulnerability status
 * @param dependencyVulnerabilityStatus
 */
const createDependencyVulnerabilityStatus = async (
    dependencyVulnerabilityStatus: DependencyStatusHelpInputType,
) => {
    try {
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - createDependencyVulnerabilityStatus] dependencyVulnerabilityStatus title:  ${dependencyVulnerabilityStatus?.title}`,
        );
        if (!dependencyVulnerabilityStatus?.title?.length) {
            return null;
        }

        const createdDependencyVulnerabilityStatus = await DependencyStatusHelpModelType.create(
            formatDependencyVulnerabilityStatusInput(dependencyVulnerabilityStatus),
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - createDependencyVulnerabilityStatus] createdDependencyVulnerabilityStatus: ${createdDependencyVulnerabilityStatus?._id}`,
        );

        return createdDependencyVulnerabilityStatus;
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - createDependencyVulnerabilityStatus] error:  ${error}`,
        );
        return null;
    }
};

/**
 * Edit an existing dependency vulnerability status
 * @param dependencyStatusHelp
 */
const editDependencyVulnerabilityStatus = async (
    dependencyVulnerabilityStatus: DependencyStatusHelpInputType,
) => {
    try {
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - editDependencyVulnerabilityStatus] dependencyVulnerabilityStatus id:  ${dependencyVulnerabilityStatus?._id}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - editDependencyVulnerabilityStatus] dependencyVulnerabilityStatus title:  ${dependencyVulnerabilityStatus?.title}`,
        );

        if (!dependencyVulnerabilityStatus?._id || !dependencyVulnerabilityStatus?.title?.length) {
            return null;
        }

        const editedDependencyVulnerabilityStatus = await DependencyStatusHelpModelType.update(
            formatDependencyVulnerabilityStatusInput(dependencyVulnerabilityStatus),
            {
                where: {
                    _id: dependencyVulnerabilityStatus?._id,
                },
            },
        );

        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - editDependencyVulnerabilityStatus] editedDependencyVulnerabilityStatus: ${editedDependencyVulnerabilityStatus?.[0]}`,
        );

        return {
            _id: dependencyVulnerabilityStatus?._id,
        };
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - editDependencyVulnerabilityStatus] error:  ${error}`,
        );
        return null;
    }
};

/**
 * Delete a dependency vulnerability status
 * @param _id
 */
const deleteDependencyVulnerabilityStatus = async ({ _id }: DependencyStatusHelpType) => {
    try {
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - deleteDependencyVulnerabilityStatus] _id:  ${_id}`,
        );
        if (!_id) {
            return null;
        }

        await DependencyStatusHelpModelType.destroy({
            where: {
                _id,
            },
        });

        return {
            _id,
        };
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - deleteDependencyVulnerabilityStatus] error:  ${error}`,
        );
        return null;
    }
};

/**
 * Delete all dependency vulnerability status
 */
const deleteDependencyVulnerabilityStatusList = async () => {
    try {
        await DependencyStatusHelpModelType.destroy({
            truncate: true,
        });

        return true;
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - deleteDependencyVulnerabilityStatusList] error:  ${error}`,
        );
        return false;
    }
};

/**
 * Get dependency vulnerability status list by page and params
 * @param start
 * @param limit
 * @param sort
 */
const getDependencyVulnerabilityStatusListByPageAndParams = async ({
    start,
    limit,
    sort,
}: SearchQueryType) => {
    try {
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusListByPageAndParams] start: ${start}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusListByPageAndParams] limit: ${limit}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusListByPageAndParams] sort: ${sort}`,
        );

        // Construct the query options based on provided arguments
        const queryOptions: FindOptions = {};

        // Handle pagination
        if (start) {
            // queryOptions.offset = start;
        }

        if (limit) {
            // queryOptions.limit = limit;
        }

        const dependencyVulnerabilityStatusList =
            await DependencyStatusHelpModelType.findAll(queryOptions);
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusListByPageAndParams] dependencyVulnerabilityStatusList: ${dependencyVulnerabilityStatusList?.length}`,
        );

        return dependencyVulnerabilityStatusList?.map((item) => item?.dataValues) || [];
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusListByPageAndParams] error:  ${error}`,
        );
        return [];
    }
};

/**
 * Get dependency vulnerability status details by params
 * @param _id
 * @param category
 */
const getDependencyVulnerabilityStatusDetailsByParams = async ({
    _id,
    category,
}: DependencyStatusHelpType) => {
    try {
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusDetailsByParams] _id: ${_id}`,
        );
        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusDetailsByParams] category: ${category}`,
        );

        const dependencyVulnerabilityStatusDetails = _id
            ? (
                  await DependencyStatusHelpModelType.findOne({
                      where: {
                          _id,
                      },
                  })
              )?.dataValues
            : (
                  await DependencyStatusHelpModelType.findOne({
                      where: {
                          category,
                      },
                  })
              )?.dataValues;

        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusDetailsByParams] dependencyVulnerabilityStatusDetails _id: ${dependencyVulnerabilityStatusDetails?._id}`,
        );

        if (!dependencyVulnerabilityStatusDetails?._id) {
            return null;
        }

        return dependencyVulnerabilityStatusDetails;
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - getDependencyVulnerabilityStatusDetailsByParams] error: ${error}`,
        );
        return null;
    }
};

/**
 * Initialize default data
 */
const initDefaultData = async () => {
    try {
        const dependencyVulnerabilityStatusCount = await DependencyStatusHelpModelType.count();

        AppLogger.info(
            `[DependencyVulnerabilityStatusProvider - initDefaultData] dependencyVulnerabilityStatusCount:  ${dependencyVulnerabilityStatusCount}`,
        );

        if (dependencyVulnerabilityStatusCount > 0) {
            return true;
        }

        for (const dependencyVulnerabilityStatus of defaultVulnerabilityDependencyStatusHelp) {
            await createDependencyVulnerabilityStatus(dependencyVulnerabilityStatus);
        }

        return true;
    } catch (error) {
        AppLogger.error(
            `[DependencyVulnerabilityStatusProvider - initDefaultData] error:  ${error}`,
        );
        return false;
    }
};

const DependencyVulnerabilityStatusProvider = {
    initDefaultData,
    createDependencyVulnerabilityStatus,
    editDependencyVulnerabilityStatus,
    deleteDependencyVulnerabilityStatus,
    deleteDependencyVulnerabilityStatusList,
    getDependencyVulnerabilityStatusListByPageAndParams,
    getDependencyVulnerabilityStatusDetailsByParams,
};

export default DependencyVulnerabilityStatusProvider;
